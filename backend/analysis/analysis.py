import os
import uuid
import logging
from chromadb import PersistentClient
from sentence_transformers import SentenceTransformer
import nltk

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Download necessary NLTK data for sentence tokenization
try:
    nltk.download('punkt', quiet=True)
except Exception as e:
    logger.error(f"Error downloading NLTK data: {e}")

class RentalAnalysis:
    """
    A class to analyze rental agreements using vector embeddings.
    Creates and manages two collections:
    1. minimal_requirements - Contains minimal requirements for a valid rental agreement
    2. sample_agreement - Contains a sample rental agreement for comparison
    """
    
    def __init__(self):
        # Create directory for ChromaDB data
        data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'chroma_data')
        os.makedirs(data_dir, exist_ok=True)
        
        # Initialize ChromaDB client
        self.client = PersistentClient(path=data_dir)

        
        # Initialize sentence embedding model
        self.model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
        
        # Create collections
        self.minimal_requirements = self.client.get_or_create_collection("minimal_requirements")
        self.sample_agreement = self.client.get_or_create_collection("sample_agreement")
        
        # Populate collections if they're empty
        self._initialize_collections()
        
        logger.info("Rental agreement analysis initialized")
    
    def _initialize_collections(self):
        """Initialize collections with data if they are empty."""
        # Check if collections are empty
        min_req_data = self.minimal_requirements.get()
        sample_data = self.sample_agreement.get()
        
        # Only populate if empty
        if len(min_req_data["ids"]) == 0:
            logger.info("Populating minimal requirements collection")
            self._populate_minimal_requirements()
        
        if len(sample_data["ids"]) == 0:
            logger.info("Populating sample agreement collection")
            self._populate_sample_agreement()
    
    def _populate_minimal_requirements(self):
        """Populate the minimal requirements collection with essential clauses for rental agreements."""
        requirements = [
            "Der Mietvertrag muss die genaue Anschrift der Wohnung enthalten.",
            "Die Namen und Anschriften aller Mietparteien m√ºssen angegeben sein.",
            "Die monatliche Mieth√∂he muss klar festgelegt sein.",
            "Die Mietkaution darf maximal drei Monatsmieten betragen.",
            "Nebenkosten m√ºssen genau definiert sein.",
            "Die K√ºndigungsfrist muss gesetzeskonform sein (3 Monate Standardfrist).",
            "Der Beginn des Mietverh√§ltnisses muss schriftlich festgehalten sein.",
            "Bei befristeten Mietvertr√§gen muss der Grund der Befristung angegeben sein.",
            "Die Wohnfl√§che sollte genau angegeben sein.",
            "Regelungen zur Instandhaltung und Kleinreparaturen m√ºssen enthalten sein.",
            "Haustierhaltung muss geregelt sein.",
            "Regelungen zu baulichen Ver√§nderungen m√ºssen vorhanden sein.",
            "Die Pflicht zur Sch√∂nheitsreparaturen muss klar definiert sein."
        ]
        
        # Create embeddings for all requirements
        embeddings = self.model.encode(requirements)
        
        # Add each requirement to the collection
        for req, emb in zip(requirements, embeddings):
            self.minimal_requirements.add(
                documents=[req],
                embeddings=[emb.tolist()],
                ids=[str(uuid.uuid4())],
                metadatas=[{"info": "Beispiel"}]
            )
    
    def _populate_sample_agreement(self):
        """Populate the sample agreement collection with clauses from a typical rental agreement."""
        sample_clauses = [
            "¬ß1 Mietr√§ume: Der Vermieter vermietet an den Mieter zu Wohnzwecken die Wohnung in der Musterstra√üe 123, 12345 Musterstadt, bestehend aus 3 Zimmern, K√ºche, Bad mit einer Gesamtwohnfl√§che von ca. 75 qm.",
            "¬ß2 Mietdauer: Das Mietverh√§ltnis beginnt am 01.01.2023 und l√§uft auf unbestimmte Zeit.",
            "¬ß3 Miete: Die monatliche Grundmiete betr√§gt 750,00 EUR. Die Miete ist monatlich im Voraus, sp√§testens am dritten Werktag des Monats zu entrichten.",
            "¬ß4 Nebenkosten: Zus√§tzlich zur Grundmiete zahlt der Mieter monatliche Vorauszahlungen f√ºr Betriebskosten in H√∂he von 200,00 EUR.",
            "¬ß5 Kaution: Der Mieter zahlt an den Vermieter eine Kaution in H√∂he von 2.250,00 EUR (drei Monatsmieten).",
            "¬ß6 Instandhaltung: Der Mieter hat die Mietr√§ume und die gemeinschaftlichen Einrichtungen schonend und pfleglich zu behandeln.",
            "¬ß7 Sch√∂nheitsreparaturen: Der Mieter √ºbernimmt die Sch√∂nheitsreparaturen innerhalb der Wohnung auf eigene Kosten.",
            "¬ß8 K√ºndigung: Die K√ºndigungsfrist betr√§gt f√ºr beide Parteien drei Monate. Die K√ºndigung muss schriftlich erfolgen.",
            "¬ß9 Haustierhaltung: Die Haltung von Kleintieren ist erlaubt. F√ºr andere Tiere ist die Erlaubnis des Vermieters einzuholen.",
            "¬ß10 Bauliche Ver√§nderungen: Bauliche Ver√§nderungen d√ºrfen nur mit schriftlicher Zustimmung des Vermieters vorgenommen werden.",
            "¬ß11 Hausordnung: Die Hausordnung ist Bestandteil dieses Vertrages.",
            "¬ß12 Schl√ºssel: Der Mieter erh√§lt bei Einzug 3 Haust√ºrschl√ºssel und 2 Wohnungsschl√ºssel.",
            "¬ß13 R√ºckgabe der Mietsache: Bei Beendigung des Mietverh√§ltnisses hat der Mieter die Mietsache vollst√§ndig ger√§umt und gereinigt zur√ºckzugeben."
        ]
        
        # Create embeddings for all clauses
        embeddings = self.model.encode(sample_clauses)
        
        # Add each clause to the collection
        for clause, emb in zip(sample_clauses, embeddings):
            clause_number = clause.split(" ")[0]
            clause_title = clause.split(":")[0].split(" ", 1)[1] if ":" in clause else ""
            
            self.sample_agreement.add(
                documents=[clause],
                embeddings=[emb.tolist()],
                ids=[str(uuid.uuid4())],
                metadatas=[{"info": "Beispiel"}]
            )
        
    def split_text_into_sections(self, text):
        """Split a text into sentences using newline character."""
        try:
            sentences = text.split('\n')
            # Filter out too short or empty sentences
            sentences = [s.strip() for s in sentences if len(s.strip()) > 10]
            return sentences
        except Exception as e:
            logger.error(f"Error splitting text into sentences: {e}")
            return []
    
    def analyze_document_for_issues(self, sentences, document_metadata=None):
        """
        Analyze a rental agreement document for issues by comparing each sentence
        with the sample agreement to identify unusual clauses.
        
        Args:
            sentences (list): List of sentences from the document
            document_metadata (dict, optional): Metadata about the document
            
        Returns:
            list: Analysis results for each identified issue, formatted according to the OpenAPI spec
        """
        if document_metadata is None:
            document_metadata = {}
            
        results = []
        
        # Skip if no sentences
        if not sentences:
            return [{"text": "Keine S√§tze zum Analysieren gefunden.", 
                    "category": "fehlend", 
                    "description": "Das Dokument enth√§lt keinen Text oder konnte nicht gelesen werden."}]
        
        # Process each sentence
        for sentence in sentences:
            # Skip very short sentences
            if len(sentence) < 10:
                continue
                
            # Create embedding for the sentence
            try:
                sentence_embedding = self.model.encode([sentence])[0].tolist()
                
                # Search for similar clauses in the sample agreement
                search_results = self.sample_agreement.query(
                    query_embeddings=[sentence_embedding],
                    n_results=1
                )
                
                # Check if there's a match in the sample agreement
                if search_results["distances"][0][0] > 0.3:  # Higher distance means less similar
                    # This is an unusual clause that doesn't match any standard clause
                    
                    results.append({
                        "text": sentence,
                        "category": "unusual",
                        "description": ""
                    })
                else: 
                    results.append({
                            "text": sentence,
                            "category": "",
                            "description": ""
                        })
                
            except Exception as e:
                logger.error(f"Error analyzing sentence: {e}")
                continue
        
        return results

# Create a singleton instance
analyzer = RentalAnalysis()

if __name__ == "__main__":
    # Test code
    query = "K√ºndigungsfrist Mietvertrag"
    
    # Query minimal requirements
    query_embedding = analyzer.model.encode([query])[0].tolist()
    results = analyzer.minimal_requirements.query(
        query_embeddings=[query_embedding],
        n_results=2
    )
    
    print("\nüîç Relevante minimale Anforderungen:")
    for doc, dist in zip(results["documents"][0], results["distances"][0]):
        print(f" - {doc} (√Ñhnlichkeit: {1 - dist:.4f})")
    
    # Query sample agreement
    results = analyzer.sample_agreement.query(
        query_embeddings=[query_embedding],
        n_results=2
    )
    
    print("\nüîç Relevante Klauseln aus dem Mustermietvertrag:")
    for doc, dist in zip(results["documents"][0], results["distances"][0]):
        print(f" - {doc} (√Ñhnlichkeit: {1 - dist:.4f})")